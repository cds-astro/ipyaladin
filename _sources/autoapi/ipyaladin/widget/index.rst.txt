ipyaladin.widget
================

.. py:module:: ipyaladin.widget

.. autoapi-nested-parse::

   Aladin Lite widget for Jupyter Notebook.

   This module provides a Python wrapper around the Aladin Lite JavaScript library.
   It allows to display astronomical images and catalogs in an interactive way.

   ..
       !! processed by numpydoc !!


Classes
-------

.. autoapisummary::

   ipyaladin.widget.Aladin


Functions
---------

.. autoapisummary::

   ipyaladin.widget.widget_should_be_loaded


Module Contents
---------------

.. py:function:: widget_should_be_loaded(func: collections.abc.Callable) -> collections.abc.Callable

   
   Check if the widget is ready to execute a function.


   :Parameters:

       **func** : Callable
           The function to decorate.



   :Returns:

       Callable
           The decorated function.











   ..
       !! processed by numpydoc !!

.. py:class:: Aladin(*args: any, **init_options: any)



   
   Aladin Lite widget.

   This widget is a Python wrapper around the Aladin Lite JavaScript library.
   It allows to display astronomical images and catalogs in an interactive way.















   ..
       !! processed by numpydoc !!

   .. py:property:: height
      :type: int

      
      The height of the Aladin Lite widget.





      :Returns:

          int
              The height of the widget in pixels.











      ..
          !! processed by numpydoc !!


   .. py:property:: target
      :type: Union[astropy.coordinates.SkyCoord, Tuple[float, float]]

      
      The target of the Aladin Lite widget.

      The target can be provided as coordinates (either
      `~astropy.coordinates.SkyCoord` or (`~astropy.coordinates.Longitude`,
      `~astropy.coordinates.Latitude`)) or as a name (as a string).

      The conversion from a name to coordinates does call different online services
      depending on the base layer of the widget:
      - for the sky: it uses CDS's
      `Sesame <https://vizier.cds.unistra.fr/viz-bin/Sesame>`_  name resolver. This
      looks first in SIMBAD, then in VizieR, and then in NED for the object's
      coordinates.
      - for Earth: it uses `Nominatim
      <https://nominatim.openstreetmap.org/ui/search.html>`_, OpenStreetMap's
      search bar
      - for other solar system bodies: it calls the `Gazetteer of Planetary
      Nomenclature <https://planetarynames.wr.usgs.gov/Nomenclature>`_




      :Returns:

          `~astropy.coordinates.SkyCoord` or Tuple[Longitude, Latitude]
              If ipyaladin has a sky survey, returns a `~astropy.coordinates.SkyCoord`
              object. Otherwise, if ipyaladin is currently on a planetary body, returns
              a tuple with the Longitude and the Latitude of the current position of the
              widget.











      ..
          !! processed by numpydoc !!


   .. py:property:: fov
      :type: astropy.coordinates.Angle

      
      The field of view of the Aladin Lite widget along the horizontal axis.

      It can be set with either a float number in degrees
      or an astropy.coordinates.Angle object.




      :Returns:

          astropy.coordinates.Angle
              An astropy.coordinates.Angle object representing the field of view.







      .. seealso::

          
          :obj:`fov_xy`
              ..
          



      ..
          !! processed by numpydoc !!


   .. py:property:: selected_objects
      :type: List[astropy.table.Table]

      
      The list of catalogs selected by the user.





      :Returns:

          list[Table]
              A list of astropy.table.Table objects representing the selected catalogs.











      ..
          !! processed by numpydoc !!


   .. py:property:: wcs
      :type: astropy.wcs.WCS

      
      The world coordinate system corresponding to the current view of ipyaladin.





      :Returns:

          `~astropy.wcs.WCS`
              An astropy WCS object representing the world coordinate system.











      ..
          !! processed by numpydoc !!


   .. py:property:: fov_xy
      :type: Tuple[astropy.coordinates.Angle, astropy.coordinates.Angle]

      
      The field of view of the Aladin Lite along the two axes.





      :Returns:

          tuple[Angle, Angle]
              A tuple of astropy.units.Angle objects representing the field of view.











      ..
          !! processed by numpydoc !!


   .. py:method:: add_markers(markers: Union[ipyaladin.elements.marker.Marker, List[ipyaladin.elements.marker.Marker]], **catalog_options: any) -> None

      
      Add markers to the Aladin Lite widget.

      Markers have a popup window that appear when they're clicked on.

      :Parameters:

          **markers** : Marker or list[Marker]
              The marker(s) to add to the widget. It can be given as a single `Marker`
              object or as a list of `Marker` objects.

          **catalog_options** : any
              The options for the catalog. See the `Aladin Lite catalog options
              <https://cds-astro.github.io/aladin-lite/global.html#CatalogOptions>`_










      .. seealso::

          
          :obj:`add_table`
              also adds points, but without popup window.
          
          



      ..
          !! processed by numpydoc !!


   .. py:method:: save_view_as_image(path: Union[str, pathlib.Path], image_format: str = 'png', with_logo: bool = True) -> None

      
      Save the current view of the widget as an image file.

      This should be used as quick previews, or illustrations. For scientific-quality
      pixels, use 'get_view_as_fits'.

      :Parameters:

          **path** : Union[str, Path]
              The path where the image will be saved.

          **image_format** : str
              The format of the image. Can be 'png', 'jpeg' or 'webp'.

          **with_logo** : bool
              Whether to include the Aladin Lite logo in the image.










      .. seealso::

          
          :obj:`get_view_as_fits`
              conserves the photometry
          
          



      ..
          !! processed by numpydoc !!


   .. py:method:: get_view_as_fits() -> astropy.io.fits.HDUList

      
      Get the base layer of the widget as an astropy HDUList object.

      The output FITS image will have the same shape as the
      current view of the widget. This uses `astroquery.hips2fits` internally.
      This method currently only exports the bottom/base layer.




      :Returns:

          `~astropy.io.fits.HDUList`
              The FITS object containing the image.







      .. seealso::

          
          :obj:`save_view_as_image`
              ..
          



      ..
          !! processed by numpydoc !!


   .. py:method:: get_JPEG_thumbnail() -> None

      
      Create a new tab with the current Aladin view.

      This method will only work if you are running a notebook in a browser (for
      example, it won't do anything in VSCode).











      .. seealso::

          
          :obj:`save_view_as_image`
              will save the image on disk instead
          
          



      ..
          !! processed by numpydoc !!


   .. py:method:: add_catalog_from_URL(votable_URL: str, votable_options: Optional[dict] = None) -> None

      
      Load a VOTable table from an url and load its data into the widget.


      :Parameters:

          **votable_URL** : str
              ..

          **votable_options** : dict
              ..














      ..
          !! processed by numpydoc !!


   .. py:method:: add_fits(fits: Union[str, pathlib.Path, astropy.io.fits.HDUList], **image_options: any) -> None

      
      Load a FITS image into the widget.


      :Parameters:

          **fits** : Union[str, Path, HDUList]
              The FITS image to load in the widget. It can be given as a path (either a
              string or a `pathlib.Path` object), or as an `astropy.io.fits.HDUList`.

          **image_options** : any
              The options for the image. See the `Aladin Lite image options
              <https://cds-astro.github.io/aladin-lite/global.html#ImageOptions>`_














      ..
          !! processed by numpydoc !!


   .. py:method:: add_moc(moc: any, **moc_options: any) -> None

      
      Add a MOC to the Aladin-Lite widget.


      :Parameters:

          **moc** : `~mocpy.MOC` or str or dict
              The MOC can be provided as a `mocpy.MOC` object, as a string containing an
              URL where the MOC can be retrieved, or as a dictionary where the keys are
              the HEALPix orders and the values are the pixel indices
              (ex: {"1":[1,2,4], "2":[12,13,14,21,23,25]}).

          **moc_options**
              Keyword arguments. The possible values are documented in `Aladin Lite's MOC
              options <https://cds-astro.github.io/aladin-lite/global.html#MOCOptions>`_














      ..
          !! processed by numpydoc !!


   .. py:method:: add_moc_from_URL(moc_URL: str, moc_options: Optional[dict] = None) -> None

      
      Load a MOC from a URL and display it in Aladin Lite widget.


      :Parameters:

          **moc_URL: str**
              An URL to retrieve the MOC from

          **moc_options**
              Keyword arguments. The possible values are documented in `Aladin Lite's MOC
              options <https://cds-astro.github.io/aladin-lite/global.html#MOCOptions>`_














      ..
          !! processed by numpydoc !!


   .. py:method:: add_moc_from_dict(moc_dict: dict, moc_options: Optional[dict] = None) -> None

      
      Load a MOC from a dict object and display it in Aladin Lite widget.


      :Parameters:

          **moc_dict: dict**
              It contains the MOC cells. Key are the HEALPix orders, values are the pixel
              indexes, eg: {"1":[1,2,4], "2":[12,13,14,21,23,25]}

          **moc_options**
              Keyword arguments. The possible values are documented in `Aladin Lite's MOC
              options <https://cds-astro.github.io/aladin-lite/global.html#MOCOptions>`_














      ..
          !! processed by numpydoc !!


   .. py:method:: add_table(table: Union[astropy.table.table.QTable, astropy.table.Table], **table_options: any) -> None

      
      Load a table into the widget.


      :Parameters:

          **table** : `~astropy.table.table.QTable` or `~astropy.table.table.Table`
              table that must contain coordinates information

          **table_options**
              Keyword arguments. The possible values are documented in `Aladin Lite's
              table options
              <https://cds-astro.github.io/aladin-lite/global.html#CatalogOptions>`_










      .. seealso::

          
          :obj:`add_markers`
              adds markers with a popup window when clicked
          
          



      ..
          !! processed by numpydoc !!


   .. py:method:: add_graphic_overlay_from_region(region: SupportedRegion, **graphic_options: any) -> None

      
      Add an overlay graphic layer to the Aladin Lite widget.


      :Parameters:

          **region: `~regions.CircleSkyRegion`, `~regions.EllipseSkyRegion`,**
              ..

          **`~regions.LineSkyRegion`,`~regions.PolygonSkyRegion`,**
              ..

          **`~regions.RectangleSkyRegion`, `~regions.Regions`, or a list of these.**
              The region(s) to add in Aladin Lite. It can be given as a supported region
              or a list of regions from the
              `regions package <https://astropy-regions.readthedocs.io>`_.

          **graphic_options: keyword arguments**
              The options for the graphic overlay. Use Region visual for region options.
              See `Aladin Lite's graphic overlay options
              <https://cds-astro.github.io/aladin-lite/A.html>`_










      .. seealso::

          
          :obj:`add_graphic_overlay_from_stcs`
              for shapes described as STC-S strings.
          
          
      .. rubric:: Notes

      The possible `~regions.RegionVisual` options correspond to the
      Aladin Lite / ipyaladin parameters:

      .. table:: Correspondence between options
          :widths: auto

          ============== ===================== ======================
          RegionVisual        AladinLite              ipyaladin
          ============== ===================== ======================
          edgecolor      color                 color
          facecolor      fillColor             fill_color
          color          color and fillColor   color and fill_color
          alpha          opacity               opacity
          linewidth      lineWidth             line_width
          ============== ===================== ======================



      ..
          !! processed by numpydoc !!


   .. py:method:: add_overlay_from_stcs(stc_string: Union[List[str], str], **overlay_options: any) -> None

      
      Add an overlay layer defined by an STC-S string.


      :Parameters:

          **stc_string** : str, list[str]
              The STC-S string or a list of STC-S strings.

          **overlay_options** : keyword arguments
              The overlay options for all the STC-S strings
              See `Aladin Lite's graphic overlay options
              <https://cds-astro.github.io/aladin-lite/A.html>`_














      ..
          !! processed by numpydoc !!


   .. py:method:: add_graphic_overlay_from_stcs(stc_string: Union[List[str], str], **overlay_options: any) -> None

      
      Add an overlay layer defined by an STC-S string.


      :Parameters:

          **stc_string** : str, list[str]
              The STC-S string or a list of STC-S strings.

          **overlay_options** : keyword arguments
              The overlay options for all the STC-S strings.
              See `Aladin Lite's graphic overlay options
              <https://cds-astro.github.io/aladin-lite/A.html>`_










      .. seealso::

          
          :obj:`add_graphic_overlay_from_region`
              if the shape is in an astropy `~regions`
          :obj:`object.`
              ..
          



      ..
          !! processed by numpydoc !!


   .. py:method:: set_color_map(color_map_name: str) -> None

      
      Change the color map of the Aladin Lite widget.


      :Parameters:

          **color_map_name: str**
              The name of the color map to use.














      ..
          !! processed by numpydoc !!


   .. py:method:: selection(selection_type: str = 'rectangle') -> None

      
      Trigger the selection tool.


      :Parameters:

          **selection_type: str**
              The type of selection tool to trigger. Can be 'circle' or 'rectangle'.
              Default is 'rect'.














      ..
          !! processed by numpydoc !!


   .. py:method:: rectangular_selection() -> None

      
      Trigger the rectangular selection tool.













      .. rubric:: Notes

      This method is deprecated, use selection instead



      ..
          !! processed by numpydoc !!


   .. py:method:: set_listener(listener_type: str, callback: collections.abc.Callable) -> None

      
      Set a listener for an event to the widget.


      :Parameters:

          **listener_type** : str
              Can either be 'object_hovered', 'object_clicked', 'click' or 'select'

          **callback** : Callable
              A python function to be called when the event corresponding to the
              listener_type is detected














      ..
          !! processed by numpydoc !!


   .. py:method:: add_listener(listener_type: str, callback: collections.abc.Callable) -> None

      
      Add a listener to the widget. Use set_listener instead.


      :Parameters:

          **listener_type: str**
              Can either be 'object_hovered', 'object_clicked', 'click' or 'select'

          **callback: Callable**
              A python function to be called when the event corresponding to the
              listener_type is detected











      .. rubric:: Notes

      This method is deprecated, use set_listener instead



      ..
          !! processed by numpydoc !!


